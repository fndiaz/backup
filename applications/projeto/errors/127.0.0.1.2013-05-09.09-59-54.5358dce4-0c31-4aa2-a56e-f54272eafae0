(dp1
S'output'
p2
S'<class \'_mysql_exceptions.ProgrammingError\'> (1146, "Table \'admanager.agenda_lg\' doesn\'t exist")'
p3
sS'layer'
p4
S'/var/www/agenda/applications/projeto/controllers/initial.py'
p5
sS'code'
p6
S'# coding=UTF-8\nimport datetime\n\ndef principal():\n\tresponse.title="principal"\n\t\n\tagen_glo = db.executesql("SELECT * from agenda WHERE particular = \'F\' order by id desc LIMIT 4;")\n\tagen_par = db.executesql("SELECT * from agenda WHERE particular = \'T\' and ramal = %s order by id desc LIMIT 4;" %str(session.ramal))\n\tprint agen_par\n\ndef agenda():\n\tresponse.title="Global"\n\n\tquery = (db.agenda.particular == \'F\')\n\t#print query\n\n\tfields = (db.agenda.id, db.agenda.empresa, db.agenda.telefone, \n\t\t\t\tdb.agenda.contato, db.agenda.dep, db.agenda.particular, db.agenda.ramal)\n\t#headers = {\'hosts.id\':   \'ID\',\n\t#           \'hosts.servicos\': \'Servicos\'}\n\tlinks=[lambda row: A(\'Discar\', \n   \t\t\t      _class=\'btn\', \n   \t\t\t      _title=\'Discar\', \n   \t\t    \t  _href=URL("initial", "/ligacao", \n   \t\t      \tvars=dict(n=row.telefone, e=row.empresa, f=\'agenda\'))),\n\t\t\t\tlambda row: A(\'Editar\', \n   \t\t      \t_class=\'btn\', \n   \t\t      \t_title=\'Editar\', \n   \t\t      \t_href=URL("initial", "/edit", \n   \t\t      \tvars=dict(f=row.id)))] \n   \n\tgrid = SQLFORM.grid(query=query, fields=fields, csv=False,\n\t\t\t\t\tdetails=False, searchable=True, deletable=True, editable=False, \n\t\t\t\t\tcreate=False, links=links, user_signature=False, orderby=db.agenda.empresa)\n\n\treturn response.render("initial/show_grid.html", grid=grid)\n\n\ndef agenda_particular():\n\tresponse.title="Particular"\n\n\tnow = datetime.datetime.now()\n\tprint now\n\n\tquery = ((db.agenda.ramal == session.ramal) & (db.agenda.particular == \'V\'))\n\t#print query\n\n\tfields = (db.agenda.id, db.agenda.empresa, db.agenda.telefone, \n\t\t\t\tdb.agenda.contato, db.agenda.dep, db.agenda.particular, db.agenda.ramal)\n\t#headers = {\'hosts.id\':   \'ID\',\n\t#           \'hosts.servicos\': \'Servicos\'}\n\tlinks=[lambda row: A(\'Discar\', \n   \t\t\t      _class=\'btn\', \n   \t\t\t      _title=\'Discar\', \n   \t\t    \t  _href=URL("initial", "/ligacao", \n   \t\t      \tvars=dict(n=row.telefone, f=\'agenda_particular\'))),\n\t\t\t\tlambda row: A(\'Editar\', \n   \t\t      \t_class=\'btn\', \n   \t\t      \t_title=\'Editar\', \n   \t\t      \t_href=URL("initial", "/edit", \n   \t\t      \tvars=dict(f=row.id)))] \n   \n\tgrid = SQLFORM.grid(query=query, fields=fields, csv=False,\n\t\t\t\t\tdetails=False, searchable=True, deletable=True, editable=False, \n\t\t\t\t\tcreate=False, links=links, user_signature=False, orderby=db.agenda.empresa)\n\n\treturn response.render("initial/show_grid.html", grid=grid)\n\n\ndef ligacao():\n\ttelefone = request.vars[\'n\']\n\tempresa = request.vars[\'e\']\n\tramal = str(session.ramal)\n\tfuncao = request.vars[\'f\']\n\tprint funcao\n\tprint telefone\n\n\tf = open(\'/tmp/pytext\',\'w\')\n\tf.write(session.ramal_fis)\n\tf = open(\'/tmp/pytext\',\'a\')\n\tf.write(\'\\n%s\' %(telefone))\n\tf.close()\n\n\tnow = str(datetime.datetime.now())\n\tnow=now.split(\'.\')[0]\n\tprint now\n\tteste = db.executesql("INSERT INTO agenda_lg (ramal, telefone, datetime, empresa) VALUES(\'%s\', \'%s\', \'%s\', \'%s\');" %(ramal, telefone, now, empresa))\n\tprint teste\n\n\tsession.flash = "Liga\xc3\xa7\xc3\xa3o do ramal %s para n\xc3\xbamero %s" %(str(session.ramal), telefone)\n\tredirect(URL("initial", "/%s" %(funcao)))\n\n\ndef redireciona():\n\tif session.aut != \'0\':\n\t\tfuncao = request.vars[\'f\']\n\t\tredirect(URL("initial", "/%s" %(funcao)))\n\telse:\n\t\tprint \'ramal %s nao esta logado (redireciona)\' %(session.aut)\n\t\tsession.flash = "Fa\xc3\xa7a o login"\n\t\tredirect(URL("initial", "/log_in"))\n\n\ndef addition():\n\n    form = SQLFORM(db.agenda, submit_button=\'Adicionar\', \n    \t\tfields = [\'empresa\', \'telefone\', \'contato\', \'dep\', \'particular\', \'ramal\'], \n\t\t\tlabels = {\'empresa\':\'Empresa\', \'telefone\':\'Telefone\', \n\t\t\t\t\t\t\'contato\':\'Contato\', \'dep\':\'Departamento\', \n\t\t\t\t\t\t\'particular\':\'Particular\', \'ramal\':\'Ramal\'},)\n    form.vars.ramal = session.ramal\n\n    response.title="Contato"\n\n    if form.process().accepted:\n    \t#evento = request.vars\n    \t#confno = form.vars.id\n    \t#email(evento, confno)\n    \tresponse.flash = \'Inserido com sucesso\'\t\t\n    elif form.errors:\n    \tresponse.flash = \'Ops, algo n\xc3\xa3o est\xc3\xa1 correto\'\n    else:\n    \tresponse.flash = \'Insira os dados do novo host\'\n    return response.render("initial/show_form2.html", form=form)\n\n\ndef edit():\n    form = SQLFORM(db.agenda, request.vars[\'f\'], submit_button=\'Editar\')\n\n    if form.process().accepted:\n       response.flash = \'Editado com sucesso\'\n    elif form.errors:\n       response.flash = \'Ops, algo n\xc3\xa3o est\xc3\xa1 correto\'\n    else:\n       response.flash = \'Edite os dados do host\'\n\n    return response.render("initial/show_form2.html", form=form)\n\n\ndef log_in():\n\t#adicionar\n    form = SQLFORM.factory(\n    \t\tField("ramal", requires = IS_NOT_EMPTY(error_message=\n\t\t\t\t\t\tT("valor n\xc3\xa3o pode ser nulo"))),\n    \t\tField("senha", "password"),\n    \t\tformstyle="divs",\n    \t\t)\n\n    response.title="login"\n    if form.process().accepted:\n    \tramal_dig = form.vars.ramal\n    \tsenha_dig = form.vars.senha\n    \tprint \'ramal digitado:%s  senha digitada:%s\' %(ramal_dig, senha_dig) \n    \tteste = db.executesql("SELECT v.ramal_virtual, v.nome, f.username, f.secret FROM ramal_virtual v LEFT JOIN ramal f ON v.username_ramalfisico = f.username WHERE v.ramal_virtual = %s;" %(ramal_dig))\n    \tprint \'busca sql: %s\' %str(teste)\n\n    \tif teste == ():\n    \t\tprint "ramal incorreto"\n    \t\tresponse.flash = \'Ramal incorreto\'\n    \telse:\n    \t\tusuario=teste[0][1]\n    \t\tsenha=teste[0][3]\n\n    \t\tprint \'usuario senha\'\n    \t\tprint session.ramal, usuario, session.ramal_fis, senha\n    \t   \t#if ramal_dig == ramal:\n    \t\t#\tprint "ramal ok"\n    \t\tif senha_dig == senha:\n    \t\t\tprint "senha ok"\n    \t\t\tsession.ramal=teste[0][0]\n    \t\t\tsession.ramal_fis=teste[0][2]\n    \t\t\tsession.aut=session.ramal\n\n    \t\t\tprint\'login efetuado %s (log_in)\' %(session.ramal)\n    \t\t\tsession.flash = \'Bem Vindo %s\' %(usuario)\n    \t\t\tredirect(URL("initial", "/agenda"))\n    \t\telse:\n    \t\t\tprint \'senha incorreta\'\n    \t\t\tresponse.flash = \'Senha incorreta\'\t\n    return response.render("initial/show_form2.html", form=form)\n\n\ndef log_out():\n\tsession.aut=\'0\'\n\tsession.ramal=\'0\'\n\tsession.ramal_fis=\'0\'\n\tprint session.aut\n\tprint "logout (log_out)"\n\tredirect(URL("initial", "/log_in"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef email(evento, confno):\n\n\tmembros = evento.membros_user\n    \tfor a in membros:        \n   \t\t\tprint \'membro:\',a\n   \t\t\tteste = db.executesql(\'SELECT nome, email, pin FROM usuario WHERE id = %s;\' %str(a))\n   \t\t\tprint  \'select:\',teste[0][0], teste[0][1], teste[0][2]\n   \t\t\tnome = teste[0][0] #est\xc3\xa1 dando problema no envio\n   \t\t\temail = str(teste[0][1])\n   \t\t\tpin = str(teste[0][2])\n   \t\t\tprint type(email)\n   \t\t\tprint evento.starttime, evento.endtime, confno\n   \t\t\tmail.send(\n\t\t\tto="fndiaz02@gmail.com",#variavel email\n\t\t\tsubject="Confer\xc3\xaancia",\n\t\t\tmessage="<html>A confer\xc3\xaancia %s acaba de ser criada e voc\xc3\xaa \xc3\xa9 um membro, seguem os dados:<br>Hor\xc3\xa1rio de In\xc3\xadcio: %s<br>Hor\xc3\xa1rio de T\xc3\xa9rmino: %s<br>Pin: %s%s</html>" % (nome, confno, evento.starttime, evento.endtime, confno, pin)\n\t\t\t)\n\n   \tadmin = evento.admin_user\n   \tfor a in admin:\n   \t\tprint \'admin:\',a\n   \t\tteste = db.executesql(\'SELECT nome, email FROM usuario WHERE id = %s;\' %str(a))\n   \t\tprint \'select:\',teste[0][0], teste[0][1]\n   \t\tprint evento.starttime, evento.endtime, confno\n\n\n\t#if auth.has_membership(\'voip\'):\n\t#\tmail.send(\n\t#\t\tto="fndiaz02@gmail.com",\n\t#\t\tsubject="host adicionado",\n\t#\t\tmessage="<html>Um novo host foi adicionado pelo usu\xc3\xa1rio %s <br>nome: %s <br>vpn: %s<br><br>\xc3\x89 preciso fazer a instala\xc3\xa7\xc3\xa3o do client zabbix e bacula</html>" % (auth.user.first_name, host.nome, host.ip_chegada,)\n\t#\t\t)\n\t#elif auth.has_membership(\'internet\'):\n\t#\tmail.send(\n\t#\t\tto="fernando@ad2.com.br",\n\t#\t\tsubject="host adicionado",\n\t#\t\tmessage="<html>Um novo host foi adicionado pelo usu\xc3\xa1rio %s <br>nome: %s <br>vpn: %s<br><br>\xc3\x89 preciso fazer a instala\xc3\xa7\xc3\xa3o do client zabbix e bacula</html>" % (auth.user.first_name, host.nome, host.ip_chegada,)\n\t#\t\t)\n\n\n@auth.requires_login()\ndef cliente_host():\n\tfiltro = request.vars[\'f\']\n\tqueryset = db(db.cliente.id == filtro)\n\trows = queryset.select()\n\tcliente = rows[0]\n\tresponse.title = cliente.nome\n\tprint cliente\n\n\tnome_ant1 = request.vars[\'n1\']\n\tfuncao_ant1 = request.vars[\'p1\']\n\tnome_atual = cliente.nome\n\n\tquery = ((db.hosts.id_cliente == filtro) & (db.distro.id == db.hosts.id_distro))\n\tlinks = [dict(header=\'\',body=lambda row: A( IMG(_src=URL("static", "images", args=(row.distro.img)) ))), \n\t lambda row: A(\'Detalhes\', \n    \t\t      _class=\'btn\', \n    \t\t      _title=\'Detalhes\', \n    \t\t      _href=URL("initial", "/detalhes_nav", \n    \t\t      vars=dict(f=row.hosts.id, c=filtro, n=cliente.nome, \n    \t\t      \t\t\tn1=\'Clientes\', p1=\'show_cliente\', p=\'cliente_host\'))),\n\t lambda row: A(\'Editar\', \n    \t\t      _class=\'btn\', \n    \t\t      _title=\'Editar\', \n    \t\t      _href=URL("initial", "/edit_host", \n    \t\t      vars=dict(f=row.hosts.id, c=filtro, n=cliente.nome, \n    \t\t      \t\tn1=\'Clientes\', p1=\'show_cliente\', p=\'cliente_host\')))]\n\tdb.hosts.id.readable=False\n\tdb.distro.img.readable=False\n\t\n\tfields = (db.hosts.id, db.hosts.id_servidor, db.hosts.id_distro, db.distro.img, \n\t\t\t  db.hosts.ip_chegada, db.hosts.porta_ssh, db.hosts.gateway)\n\theaders = {\'hosts.id\':   \'ID\',\n\t\t\t   \'hosts.id_cliente\': \'Cliente\',\n               \'hosts.id_servidor\': \'Servidor\',\n               \'hosts.id_distro\': \'Distro\',\n               \'hosts.nome\': \'Nome\',\n\t           \'hosts.servicos\': \'Servicos\'}\n\tgrid = SQLFORM.grid(query=query, fields=fields, headers=headers, csv=False,\n\t\t\t\t\t\tdetails=False, searchable=False, maxtextlength=23, links=links, \n\t\t\t\t\t\tlinks_placement=\'left\', editable=False, create=False)\n\n\treturn response.render("initial/show_grid2.html", grid=grid, nome_ant1=nome_ant1, \n\t\t\t\t\t\tfuncao_ant1=funcao_ant1, nome_atual=nome_atual)\n\n@auth.requires_login()\ndef servidor_host():\n\tfiltro = request.vars[\'f\']\n\tqueryset = db(db.servidor.id == filtro)\n\trows = queryset.select()\n\tservidor = rows[0]\n\tresponse.title = servidor.nome\n\n\tnome_ant1 = request.vars[\'n1\']\n\tfuncao_ant1 = request.vars[\'p1\']\n\tnome_atual = servidor.nome\t\n\n\tdb.distro.img.readable=False\n\tdb.hosts.id.readable=False\n\tquery = ((db.hosts.id_servidor == filtro) & (db.distro.id == db.hosts.id_distro))\n\n\tlinks = [dict(header=\'\',body=lambda row: A( IMG(_src=URL("static", "images", args=(row.distro.img)) ))), \n\t lambda row: A(\'Detalhes\', \n    \t\t      _class=\'btn\', \n    \t\t      _title=\'Detalhes\', \n    \t\t      _href=URL("initial", "/detalhes_nav", \n    \t\t      vars=dict(f=row.hosts.id, c=filtro, n=servidor.nome, \n    \t\t      \t\tn1=\'Servidores\', p1=\'show_servidor\', p=\'servidor_host\'))),\n\t lambda row: A(\'Editar\', \n    \t\t      _class=\'btn\', \n    \t\t      _title=\'Editar\', \n    \t\t      _href=URL("initial", "/edit_host", \n    \t\t      vars=dict(f=row.hosts.id, c=filtro, n=servidor.nome, \n    \t\t      \t\tn1=\'Servidores\', p1=\'show_servidor\', p=\'servidor_host\')))]\n\n\tfields = (db.hosts.id, db.hosts.id_cliente, db.hosts.id_distro, db.distro.img, \n\t\t\t\tdb.hosts.ip_chegada, db.hosts.porta_ssh, db.hosts.gateway)\n\theaders = {\'hosts.id\':   \'ID\',\n\t\t\t   \'hosts.id_cliente\': \'Cliente\',\n               \'hosts.id_servidor\': \'Servidor\',\n               \'hosts.id_distro\': \'Distro\',\n               \'hosts.nome\': \'Nome\',\n\t           \'hosts.servicos\': \'Servicos\'}\n\tgrid = SQLFORM.grid(query=query, fields=fields, headers=headers, csv=False,\n\t\t\t\t\t\tdetails=False, searchable=False, maxtextlength=23, links=links, \n\t\t\t\t\t\tlinks_placement=\'left\', editable=False, create=False)\n\n\treturn response.render("initial/show_grid2.html", grid=grid, nome_ant1=nome_ant1, \n\t\t\t\t\t\tfuncao_ant1=funcao_ant1, nome_atual=nome_atual)\n\n@auth.requires_login()\ndef distro_host():\n\tfiltro = request.vars[\'f\']\n\tqueryset = db(db.distro.id == filtro)\n\trows = queryset.select()\n\tdistro = rows[0]\n\tresponse.title = distro.nome\n\n\tnome_ant1 = request.vars[\'n1\']\n\tfuncao_ant1 = request.vars[\'p1\']\n\tnome_atual = distro.nome\t\n\t\n\tdb.hosts.id.readable=False\n\tdb.distro.img.readable=False\n\tquery = ((db.hosts.id_distro == filtro) & (db.distro.id == db.hosts.id_distro))\n\tlinks = [dict(header=\'\',body=lambda row: A( IMG(_src=URL("static", "images", args=(row.distro.img)) ))), \n\t lambda row: A(\'Detalhes\', \n    \t\t      _class=\'btn\', \n    \t\t      _title=\'Detalhes\', \n    \t\t      _href=URL("initial", "/detalhes_nav", \n    \t\t      vars=dict(f=row.hosts.id, c=filtro, n=distro.nome, \n    \t\t      \t\tn1=\'Distros\', p1=\'show_distro\', p=\'distro_host\'))),\n\t lambda row: A(\'Editar\', \n    \t\t      _class=\'btn\', \n    \t\t      _title=\'Editar\', \n    \t\t      _href=URL("initial", "/edit_host", \n    \t\t      vars=dict(f=row.hosts.id, c=filtro, n=distro.nome, \n    \t\t      \t\tn1=\'Distros\', p1=\'show_distro\', p=\'distro_host\')))]\n\n\tfields = (db.hosts.id, db.hosts.id_cliente, db.hosts.id_servidor, db.distro.img, \n\t\t\t  db.hosts.ip_chegada, db.hosts.porta_ssh, db.hosts.gateway)\n\theaders = {\'hosts.id\':   \'ID\',\n\t\t\t\t\'hosts.id_cliente\': \'Cliente\',\n               \'hosts.id_servidor\': \'Servidor\',\n               \'hosts.id_distro\': \'Distro\',\n               \'hosts.nome\': \'Nome\',\n\t           \'hosts.servicos\': \'Servicos\'}\n\tgrid = SQLFORM.grid(query=query, fields=fields, headers=headers, csv=False,\n\t\t\t\t\t\tdetails=False, searchable=False, maxtextlength=23, links=links, \n\t\t\t\t\t\tlinks_placement=\'left\', editable=False, create=False)\n\n\treturn response.render("initial/show_grid2.html", grid=grid, nome_ant1=nome_ant1, \n\t\t\t\t\t\tfuncao_ant1=funcao_ant1, nome_atual=nome_atual)\n\ndef detalhes_nav():\n\t#detalhes\n\tfiltro = request.vars[\'f\'] #id_host\n\tid_cliente = request.vars[\'c\'] #id_cliente\n\tnome_ant = request.vars[\'n\'] #nome (asterisk ou agronelli ou debian)\n\tnome_ant1 = request.vars[\'n1\'] #nome (servidores ou clientes ou distros)\n\tfuncao_ant = request.vars[\'p\'] #funcao(host_servidores)\n\tfuncao_ant1 = request.vars[\'p1\'] #funcao(show_servidores)\n\t\n\n\tquery = ((db.hosts.id == filtro) & (db.hosts.id_cliente == db.cliente.id)\n\t \t    & (db.hosts.id_servidor == db.servidor.id) \n\t \t    & (db.hosts.id_distro == db.distro.id)) \n\tdetalhes = db.hosts(query)\n\t\n\t\n\treturn response.render("initial/detalhes_host.html", detalhes=detalhes, \n\t\t\t\tid_cliente=id_cliente, funcao_ant=funcao_ant, funcao_ant1=funcao_ant1, \n\t\t\t\tnome_ant=nome_ant, nome_ant1=nome_ant1, filtro=filtro)\n\n\ndef user():\n\t#if request.args(0) == \'register\':\n    #    \tdb.auth_user.bio.writable = db.auth_user.bio.readable = False\n\treturn response.render("initial/user.html", user=auth())\n\ndef register():\n\treturn auth.register()\n\ndef login():\n        return auth.login()\n\ndef account():\n    return dict(register=auth.register(),\n                login=auth.login())\n\t\ndef download():\n\treturn response.download(request, db)\n\n\n\n\t\n\n\n\n\nresponse._vars=response._caller(ligacao)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/var/www/agenda/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/var/www/agenda/applications/projeto/controllers/initial.py", line 424, in <module>\n  File "/var/www/agenda/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/var/www/agenda/applications/projeto/controllers/initial.py", line 87, in ligacao\n    teste = db.executesql("INSERT INTO agenda_lg (ramal, telefone, datetime, empresa) VALUES(\'%s\', \'%s\', \'%s\', \'%s\');" %(ramal, telefone, now, empresa))\n  File "/var/www/agenda/gluon/dal.py", line 7351, in executesql\n    adapter.execute(query)\n  File "/var/www/agenda/gluon/dal.py", line 1709, in execute\n    return self.log_execute(*a, **b)\n  File "/var/www/agenda/gluon/dal.py", line 1703, in log_execute\n    ret = self.cursor.execute(*a, **b)\n  File "/usr/lib/python2.7/dist-packages/MySQLdb/cursors.py", line 174, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/lib/python2.7/dist-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1146, "Table \'admanager.agenda_lg\' doesn\'t exist")\n'
p11
s.