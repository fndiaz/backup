(dp1
S'output'
p2
S'<class \'_mysql_exceptions.ProgrammingError\'> (1146, "Table \'adm.backup_lg\' doesn\'t exist")'
p3
sS'layer'
p4
S'/var/www/gravacao/applications/projeto/controllers/initial.py'
p5
sS'code'
p6
S'# coding=UTF-8\nimport datetime, os, commands\n\ndef principal():\n\tresponse.title = \'Backup\'\n\n\tform = SQLFORM.factory(\n    \t\tField(\'mes\', requires=IS_IN_SET([\'01\', \'02\', \'03\', \'04\', \'05\', \'06\', \'07\', \'08\', \'09\', \'10\', \'11\', \'12\'])),\n    \t\tField("ano", requires=IS_IN_SET(session.form_ano)),\n    \t\tformstyle="divs",\n    \t\t)\n\ttabela=[]\n\n\tif form.process().accepted:\n\t\tano = form.vars.ano\n\t\tmes = form.vars.mes\n\t\tsession.ano = ano\n\t\tsession.mes = mes\n\t\tlista_pastas = commands.getoutput("ls /var/spool/asterisk/monitor | grep %s%s" %(ano, mes))\n\t\tprint \'lista_pastas :%s:\' %(lista_pastas)\n\t\tif not lista_pastas:  ##checa se existem gravacoes\n\t\t\tprint \'vazio\'\n\t\t\tsession.flash = \'Busca n\xc3\xa3o encontrada\'\n\t\t\tredirect(URL("initial", "/principal"))\n\t\telse: ##checa se existem gravacoes\n\t\t\tresponse.flash = \'Grava\xc3\xa7\xc3\xb5es encontradas\'\t\n\t\t\tf = open(\'pastas_grav\',\'w\')\n\t\t\tf.write(lista_pastas)\n\t\t\tf = open(\'pastas_grav\', \'r\')\n\t\t\tpastas = f.readlines()\n\t\t\tprint pastas\n\t\t\tsession.pastas = pastas\n\n\t\t\tcommands.getoutput("rm -r -f /var/spool/asterisk/monitor/temp_grava")\n\t\t\tcommands.getoutput("mkdir /var/spool/asterisk/monitor/temp_grava")\n\t\t\tfor pasta in pastas:\n\t\t\t\tpasta=pasta.split(\'\\n\')[0]\n\t\t\t\tprint \'copiando pasta :%s:\' %(pasta)\n\t\t\t\tsaida_cp = os.system("cp -r /var/spool/asterisk/monitor/%s /var/spool/asterisk/monitor/temp_grava" %(pasta))\n\t\t\t\tprint \'saida cp:%s\' %(saida_cp)\n\n\t\t\tarq = commands.getoutput("find /var/spool/asterisk/monitor/temp_grava/ -type f | wc -l")\n\t\t\ttabela = [mes, ano, arq]\n\t\t\tprint tabela\n\n\treturn response.render("initial/show_form2.html", form=form, tabela=tabela)\n\n\ndef gera_pdf():\n\tresponse.title = \'Backup\'\n\topc = request.vars[\'opc\']\n\tdata = "\'%"+session.ano+\'-\'+session.mes+"%\'"\n\tprint data\n\n\tcdr = db.executesql("SELECT calldate, origem, src, dst, duration, disposition, userfield, uniqueid  from cdr WHERE calldate like %s;" %(data))\n\n    # define header and footers:\n\thead = THEAD(TR(TH("Data",_width="20%"), \n                    TH("O",_width="12%"),\n                    TH("Src",_width="14%"),\n                    TH("Dst",_width="14%"),\n                    TH("D",_width="10%"),\n                    TH("S",_width="12%"),\n                    TH("U",_width="18%"), \n                    _bgcolor="#A0A0A0"))\n\tfoot = TFOOT(TR(TH("Data",_width="20%"), \n                    TH("O",_width="12%"),\n                    TH("Src",_width="14%"),\n                    TH("Dst",_width="14%"),\n                    TH("D",_width="10%"),\n                    TH("S",_width="12%"),\n                    TH("U",_width="18%"),\n                    _bgcolor="#E0E0E0"))\n    \n    # create several rows:\n\trows = []\n\ti=0\n\tfor row in cdr:\n\t\tcol = i % 2 and "#F0F0F0" or "#FFFFFF"\n\t\tcol2="#000000"\n\t\ti=i+1\n\t\t#print i\n\t\trows.append(TR(TD(row[0]),\n                       TD(row[1]),\n                       TD(row[2]),\n                       TD(row[3]),\n                       TD(row[4]),\n                       TD(row[5]),\n                       TD(row[7]),\n                       _bgcolor=col))  \n\n    # make the table object\n\tbody = TBODY(*rows)\n\t#print body\n\ttable = TABLE(*[head,foot, body], \n                  _border="5", _align="center", _width="100%")\n\n\tfrom gluon.contrib.pyfpdf import FPDF, HTMLMixin\n\n\t# define our FPDF class (move to modules if it is reused  frequently)\n\tclass MyFPDF(FPDF, HTMLMixin):\n\t\tdef header(self):\n\t\t\tself.set_font(\'Arial\',\'B\',15)\n\t\t\tself.cell(0,10, response.title ,1,0,\'C\')\n\t\t\tself.ln(20)\n\t\t\t\n               \n\t\tdef footer(self):\n\t\t\tself.set_y(-15)\n\t\t\tself.set_font(\'Arial\',\'I\',8)\n\t\t\ttxt = \'Pag. %s de %s\' % (self.page_no(), self.alias_nb_pages())\n\t\t\tself.cell(0,10,txt,0,0,\'C\')\n                    \n\tpdf=MyFPDF()\n\t# first page:\n\tpdf.add_page()\n\tpdf.write_html(str(XML(table, sanitize=False)))\n\t#response.headers[\'Content-Type\']=\'application/agenda/principal\'\n\tpdf.output(name=\'pdf/relatorio.pdf\', dest=\'F\')\n\tprint \'relatorio pdf gerado\'\n\tcommands.getoutput("cp pdf/relatorio.pdf /var/spool/asterisk/monitor/temp_grava")\n\tprint session.pastas\n\treturn response.render("initial/show_form.html", opc=opc)\n\n\ndef gera_zip():\n\topc = \'dfq\'\n\tcommands.getoutput("rm -f /var/www/gravacao/applications/projeto/static/grava_down/grava.zip")\n\tos.system("zip -r /var/www/gravacao/applications/projeto/static/grava_down/grava.zip /var/spool/asterisk/monitor/temp_grava")\n\t\n\tpastas = "%s-%s" %(session.mes, session.ano)\n\tnow = str(datetime.datetime.now())\n\tnow=now.split(\'.\')[0]\n\tteste = db.executesql("INSERT INTO backup_lg (datetime, acao, pastas) VALUES(\'%s\', \'gerou backup\', \'%s\');" %(now, pastas ))\n\treturn response.render("initial/show_form.html", opc=opc)\n\ndef remover():\n\t#commands.getoutput("rm -f /var/www/gravacao/applications/projeto/static/grava_down/grava.zip")\n\tfor pasta in session.pastas:\n\t\tpasta=pasta.split(\'\\n\')[0]\n\t\tcommands.getoutput("rm -r -f /var/spool/asterisk/monitor/%s" %(pasta))\n\t\tprint \'removido :%s:\' %(pasta)\n\t\tsession.flash = \'grava\xc3\xa7\xc3\xb5es removidas com sucesso\'\n\t\tredirect(URL("initial", "/principal"))\n\t\n\n\n\n\n\n\n\ndef user():\n\t#if request.args(0) == \'register\':\n    #    \tdb.auth_user.bio.writable = db.auth_user.bio.readable = False\n\treturn response.render("initial/user.html", user=auth())\n\ndef register():\n\treturn auth.register()\n\ndef login():\n        return auth.login()\n\ndef account():\n    return dict(register=auth.register(),\n                login=auth.login())\n\t\ndef download():\n\treturn response.download(request, db)\n\n\n\n\t\n\n\n\n\nresponse._vars=response._caller(gera_zip)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/var/www/gravacao/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/var/www/gravacao/applications/projeto/controllers/initial.py", line 178, in <module>\n  File "/var/www/gravacao/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/var/www/gravacao/applications/projeto/controllers/initial.py", line 134, in gera_zip\n    teste = db.executesql("INSERT INTO backup_lg (datetime, acao, pastas) VALUES(\'%s\', \'gerou backup\', \'%s\');" %(now, pastas ))\n  File "/var/www/gravacao/gluon/dal.py", line 7351, in executesql\n    adapter.execute(query)\n  File "/var/www/gravacao/gluon/dal.py", line 1709, in execute\n    return self.log_execute(*a, **b)\n  File "/var/www/gravacao/gluon/dal.py", line 1703, in log_execute\n    ret = self.cursor.execute(*a, **b)\n  File "/usr/lib/python2.7/dist-packages/MySQLdb/cursors.py", line 174, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/lib/python2.7/dist-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1146, "Table \'adm.backup_lg\' doesn\'t exist")\n'
p11
s.